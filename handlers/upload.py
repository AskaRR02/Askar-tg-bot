import os
import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import MAX_FILE_SIZE
from utils.helpers import get_or_create_user, sanitize_filename
from services.virus_total import scan_file

router = Router()


class UploadStates(StatesGroup):
    waiting_for_file = State()
    processing = State()


@router.message(Command("upload"))
async def cmd_upload(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(UploadStates.waiting_for_file)
    
    await message.answer(
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ VirusTotal.\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024 * 1024)} –ú–ë"
    )


@router.message(UploadStates.waiting_for_file, F.document)
async def process_file(message: Message, state: FSMContext, session: AsyncSession):
    user = await get_or_create_user(session, message.from_user.id)
    
    if message.document.file_size > MAX_FILE_SIZE:
        await message.answer(
            f"<b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
            f"–õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞: {MAX_FILE_SIZE // (1024 * 1024)} –ú–ë\n"
            f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {message.document.file_size // (1024 * 1024)} –ú–ë"
        )
        return
    
    await state.set_state(UploadStates.processing)
    
    await state.update_data(
        file_id=message.document.file_id,
        file_name=message.document.file_name,
        file_size=message.document.file_size
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="cancel_scan")
    
    status_message = await message.answer(
        f"<b>–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª... (0%)</b>\n\n"
        f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {message.document.file_size // 1024} –ö–ë\n"
        f"–§–∞–π–ª: {message.document.file_name}\n\n"
        f"<i>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</i>",
        reply_markup=builder.as_markup()
    )
    
    await state.update_data(status_message_id=status_message.message_id)
    
    try:
        file = await message.bot.get_file(message.document.file_id)
        file_path = file.file_path
        
        await status_message.edit_text(
            f"<b>–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª... (50%)</b>\n\n"
            f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {message.document.file_size // 1024} –ö–ë\n"
            f"–§–∞–π–ª: {message.document.file_name}\n\n"
            f"<i>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</i>",
            reply_markup=builder.as_markup()
        )
        
        file_content = await message.bot.download_file(file_path)
        filename = sanitize_filename(message.document.file_name)
        
        await status_message.edit_text(
            f"<b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...</b>\n\n"
            f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ VirusTotal.\n"
            f"–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...\n\n"
            f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.</i>",
            reply_markup=builder.as_markup()
        )
        
        scan_task = asyncio.create_task(scan_file(file_content.read(), filename))
        
        dots = 0
        for i in range(30):
            if scan_task.done():
                break
                
            dots = (dots + 1) % 4
            dot_text = "." * dots
            
            current_state = await state.get_state()
            if current_state != UploadStates.processing:
                scan_task.cancel()
                logging.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
                return
                
            try:
                await status_message.edit_text(
                    f"<b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª{dot_text}</b>\n\n"
                    f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ VirusTotal.\n"
                    f"–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... ({i+1}/30)\n\n"
                    f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.</i>",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            await asyncio.sleep(10)
        
        if not scan_task.done():
            scan_task.cancel()
            await status_message.edit_text(
                f"<b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n"
                f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /upload"
            )
            return
            
        result = await scan_task
        
        if result["error"]:
            await status_message.edit_text(
                f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏</b>\n\n"
                f"{result['message']}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /upload"
            )
        else:
            threat_level = result["data"]["threat_level"]
            detection_ratio = result["data"]["detection_ratio"]
            
            status_emoji = "üü¢"
            if threat_level == "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ":
                status_emoji = "üî¥"
            elif threat_level == "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ":
                status_emoji = "üü†"
            
            detections = ""
            if result["data"]["malicious"] > 0 or result["data"]["suspicious"] > 0:
                detections = f"\n\n<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</b>\n"
                for engine in result["data"]["detection_engines"]:
                    detections += f"‚Ä¢ {engine['name']}: {engine['result']}\n"
            
            await status_message.edit_text(
                f"<b>–û—Ç—á—ë—Ç –ø–æ —Ñ–∞–π–ª—É: {filename}</b>\n\n"
                f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {threat_level}\n"
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω: {detection_ratio} –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞–º–∏\n"
                f"{detections}\n"
                f"–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload"
            )
    
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await status_message.edit_text(
            f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /upload"
        )
    
    finally:
        await state.clear()


@router.callback_query(UploadStates.processing, F.data == "cancel_scan")
async def cancel_scan(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    
    await callback.message.edit_text(
        f"<b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /upload"
    )


@router.message(UploadStates.waiting_for_file)
async def wrong_upload(message: Message):
    await message.answer(
        f"<b>–ù—É–∂–µ–Ω —Ñ–∞–π–ª</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    ) 